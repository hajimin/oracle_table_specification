import sqlalchemy
import pandas as pd



engine = sqlalchemy.create_engine("")
with engine.connect() as conn:
    query = '''
                SELECT tab_columns.TABLE_NAME,
                       tab_columns.COLUMN_ID,
                       tab_columns.COLUMN_NAME,
                       (
                           CASE
                               WHEN DATA_TYPE LIKE '%CHAR%'
                               THEN DATA_TYPE || '(' || DATA_LENGTH || ')'
                               WHEN DATA_TYPE = 'NUMBER'
                                   AND DATA_PRECISION > 0
                                   AND DATA_SCALE > 0
                               THEN DATA_TYPE || '(' || DATA_PRECISION || ',' || DATA_SCALE || ')'
                               WHEN DATA_TYPE = 'NUMBER'
                                   AND DATA_PRECISION > 0
                               THEN DATA_TYPE || '(' || DATA_PRECISION || ')'
                               WHEN DATA_TYPE = 'NUMBER'
                               THEN DATA_TYPE
                               ELSE DATA_TYPE
                           END
                       )
                       COLUMN_TYPE,
                       NULLABLE IS_NULLABLE,
                       DATA_DEFAULT,
                       (SELECT decode( sum
                              (
                                     (SELECT decode(CONSTRAINT_TYPE, 'P', 1, 'R', 2, 0)
                                       FROM USER_CONSTRAINTS
                                      WHERE CONSTRAINT_NAME = cons_columns.CONSTRAINT_NAME
                                     )
                                 )
                                 , 1, 'PRI', 2, 'FK', 3, 'PRI, FK', '')
                            FROM USER_CONS_COLUMNS cons_columns
                           WHERE TABLE_NAME = tab_columns.TABLE_NAME
                                 AND COLUMN_NAME = tab_columns.COLUMN_NAME
                          ) AS COLUMN_KEY,
                          COMMENTS.COMMENTS AS COLUMN_COMMENT
                FROM USER_TAB_COLUMNS tab_columns,
                     USER_COL_COMMENTS comments
                WHERE tab_columns.TABLE_NAME = comments.TABLE_NAME(+)
                      AND tab_columns.COLUMN_NAME = comments.COLUMN_NAME(+)
                ORDER BY COLUMN_ID
            '''

    res = conn.execute(query)
    df = pd.DataFrame(res.fetchall())

    not_tb = df[~df['table_name'].str.contains('TEST', na=False, case=False)]
    print(data)
